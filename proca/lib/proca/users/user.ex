defmodule Proca.Users.User do
  @moduledoc """
  User schema generated by POW
  """
  use Ecto.Schema
  use Pow.Ecto.Schema
  alias Proca.Users.StrongPassword
  alias Proca.{Repo,Users.User}

  schema "users" do
    pow_user_fields()

    has_many :staffers, Proca.Staffer

    timestamps()
  end

  @pow_config [otp_app: :proca]

  def pow_config do
    @pow_config
  end

  def create(email) do
    params = params_for(email)
    case Pow.Operations.create(params, @pow_config) do
      {:ok, user} -> %{user|password: params.password}
      _ -> nil
    end
  end

  def params_for(email) do
    pwd = StrongPassword.generate()

    %{
      email: email,
      password: pwd,
      password_confirmation: pwd
    }
  end

  def reset_password(email) do
    with u = %User{} <- Repo.get_by(User, %{email: email}),
         new_pass <- StrongPassword.generate(),
         {:ok, u2} <- Pow.Ecto.Schema.Changeset.new_password_changeset(u, %{password:  new_pass}, @pow_config) |> Repo.update()
      do
      {:ok, u2, new_pass}
      else
        nil -> {:error, "user not found"}
        err -> err
    end
  end
end
